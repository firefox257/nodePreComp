#js<hash.js>
#js
	console.log("$atdir " + $atdir);
	//console.log("here1");
	//$stop();
	var outname = $atdir + "trytry1.cpp";
	$lib.fsWrite(outname, "");
	$out = function(txt)
	{
		$lib.fsAppend(outname, txt + "");
		//$lib.cout(txt);
	}
	
	var classname = "";
	function tclass(n)
	{
		classname = n;
		return `class ${n}`;
	}
	$lib.Map("tclass");
	
	
	function gs(p, t, n)
	{
		return `
		private: 
		${t} _${n}; 
		public: 
		static ${t} get${n}(${p} * at){ return at->_${n};} 
		static void set${n}(${p} * at, ${t} v){ at->_${n} = v; } 
		GetSet<${t}> ${n} = GetSet<${t}>(this, (void*)get${n}, (void*)set${n});`;
	}
	$lib.Map("gs");
	
	function gsb(p, t, n)
	{
		return `
		private: 
		${t} _${n}; 
		public: 
		static ${t} get${n}(${p} * at){ return at->_${n};} 
		static void set${n}(${p} * at, ${t} v){ at->_${n} = v; } 
		GetSetObserver<${t}> ${n} = GetSetObserver<${t}>(this, (void*)get${n}, (void*)set${n});`;
	}
	$lib.Map("gsb");
	
	
#endjs


#include<iostream>
#include <iostream>
#include <string>
#include <list>
using namespace std;



template<class V>
class GetSet
{
	void * p = 0;
	V (*g)(void * p);
	void(*s)(void* p, V v);
	public:
	GetSet(void * _p, void * _g, void* _s)
	{
		p = _p;
		g = (V(*)(void*))_g;
		s = (void(*)(void*, V))_s;
	}
	
	void operator = (V v)
	{
		s(p, v);
	}
	operator V()
	{
		return g(p);
	}
	
};


template<class V>
class GetSetObserver
{
	private:
	void * p = 0;
	V (*g)(void * p);
	void(*s)(void* p, V v);
	
	
	class _obNode
	{
		public:
		void * p;
		void(*event)(void *, V);
	};
	list<_obNode> ob; 
	
	
	public:
	GetSetObserver(void * _p, void * _g, void* _s)
	{
		p = _p;
		g = (V(*)(void*))_g;
		s = (void(*)(void*, V))_s;
	}
	
	void operator = (V v)
	{
		s(p, v);
		for(_obNode fp: ob)
		{
			fp.event(fp.p, v);
		}
	}
	operator V()
	{
		return g(p);
	}
	
	void addEvent(void * _p, void * event)
	{
		ob.push_back({p, (void(*)(void*, V))event});
	}
	
};


template <class V>
class ListObserver
{
};

class try1
{
	gsb("try1", "string", "title")
	gsb("try1", "int" , "w")
	public:
	static unsigned int hashName()
	{
		
		return hash("try1");
	}

};

class try2
{
	public:
	try1 data;
	try2()
	{
		data.title.addEvent(this, (void*)titleEvent);
		data.title = "hi there";
	}
	static void titleEvent(try2 * at, string v)
	{
		cout << "changed string title: " << v << "\r\n";
	}
	
};

int main()
{
	try2 t2;
	
	t2.data.title = "and more";
	
	return 0;
}
